openapi: 3.0.0
info:
  title: Q&A Platform API
  description: API documentation for the Q&A platform
  version: 1.0.0
servers:
  - url: http://localhost:4000
    description: Local server
paths:
  /questions:
    get:
      summary: Get all questions
      responses:
        '200':
          description: A list of questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
    post:
      summary: Create a new question
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
  /questions/search:
    get:
      summary: Search questions by category or title
      parameters:
        - name: category
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of matching questions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
  /questions/{questionsId}:
    get:
      summary: Get a question by ID
      parameters:
        - name: questionsId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single question
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
    put:
      summary: Update a question
      parameters:
        - name: questionsId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionInput'
      responses:
        '200':
          description: Question updated successfully
    delete:
      summary: Delete a question
      parameters:
        - name: questionsId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Question deleted successfully
  /questions/{questionId}/answers:
    get:
      summary: Get all answers for a question
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of answers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
    post:
      summary: Create an answer for a question
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerInput'
      responses:
        '201':
          description: Answer created successfully
    delete:
      summary: Delete all answers for a question
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: All answers deleted successfully
  /questions/{questionId}/vote:
    post:
      summary: Vote on a question
      parameters:
        - name: questionId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteInput'
      responses:
        '200':
          description: Vote recorded successfully
  /answers/{answerId}/vote:
    post:
      summary: Vote on an answer
      parameters:
        - name: answerId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteInput'
      responses:
        '200':
          description: Vote recorded successfully
components:
  schemas:
    Question:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the question
        title:
          type: string
          description: Title of the question
        description:
          type: string
          description: Detailed description of the question
        category:
          type: string
          description: Category of the question
        total_vote:
          type: integer
          description: Total votes received for this question
          nullable: true
      required:
        - id
        - title
        - description
        - category

    QuestionInput:
      type: object
      properties:
        title:
          type: string
          description: Title of the question
        description:
          type: string
          description: Detailed description of the question
        category:
          type: string
          description: Category of the question
      required:
        - title
        - description
        - category

    Answer:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the answer
        content:
          type: string
          description: Content of the answer
        total_vote:
          type: integer
          description: Total votes received for this answer
          nullable: true
        question_id:
          type: integer
          description: ID of the question this answer belongs to

    AnswerInput:
      type: object
      properties:
        content:
          type: string
          description: Content of the answer
      required:
        - content

    VoteInput:
      type: object
      properties:
        vote:
          type: integer
          enum: [-1, 1]
          description: Vote value (-1 for downvote, 1 for upvote)
      required:
        - vote

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
        error:
          type: object
          nullable: true

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          default: true
        message:
          type: string
        data:
          type: object
          nullable: true